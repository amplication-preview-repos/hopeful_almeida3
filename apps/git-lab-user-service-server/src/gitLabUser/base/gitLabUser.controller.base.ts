/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GitLabUserService } from "../gitLabUser.service";
import { GitLabUserCreateInput } from "./GitLabUserCreateInput";
import { GitLabUser } from "./GitLabUser";
import { GitLabUserFindManyArgs } from "./GitLabUserFindManyArgs";
import { GitLabUserWhereUniqueInput } from "./GitLabUserWhereUniqueInput";
import { GitLabUserUpdateInput } from "./GitLabUserUpdateInput";

export class GitLabUserControllerBase {
  constructor(protected readonly service: GitLabUserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GitLabUser })
  async createGitLabUser(
    @common.Body() data: GitLabUserCreateInput
  ): Promise<GitLabUser> {
    return await this.service.createGitLabUser({
      data: data,
      select: {
        avatarUrl: true,
        createdAt: true,
        email: true,
        fullName: true,
        gitlabId: true,
        glId: true,
        glUserAvatarUrl: true,
        glUserCreatedAt: true,
        glUserEmail: true,
        glUserFullName: true,
        glUserId: true,
        glUserState: true,
        glUserUsername: true,
        id: true,
        name: true,
        state: true,
        updatedAt: true,
        userEmail: true,
        username: true,
        userName: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GitLabUser] })
  @ApiNestedQuery(GitLabUserFindManyArgs)
  async gitLabUsers(@common.Req() request: Request): Promise<GitLabUser[]> {
    const args = plainToClass(GitLabUserFindManyArgs, request.query);
    return this.service.gitLabUsers({
      ...args,
      select: {
        avatarUrl: true,
        createdAt: true,
        email: true,
        fullName: true,
        gitlabId: true,
        glId: true,
        glUserAvatarUrl: true,
        glUserCreatedAt: true,
        glUserEmail: true,
        glUserFullName: true,
        glUserId: true,
        glUserState: true,
        glUserUsername: true,
        id: true,
        name: true,
        state: true,
        updatedAt: true,
        userEmail: true,
        username: true,
        userName: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GitLabUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gitLabUser(
    @common.Param() params: GitLabUserWhereUniqueInput
  ): Promise<GitLabUser | null> {
    const result = await this.service.gitLabUser({
      where: params,
      select: {
        avatarUrl: true,
        createdAt: true,
        email: true,
        fullName: true,
        gitlabId: true,
        glId: true,
        glUserAvatarUrl: true,
        glUserCreatedAt: true,
        glUserEmail: true,
        glUserFullName: true,
        glUserId: true,
        glUserState: true,
        glUserUsername: true,
        id: true,
        name: true,
        state: true,
        updatedAt: true,
        userEmail: true,
        username: true,
        userName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GitLabUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGitLabUser(
    @common.Param() params: GitLabUserWhereUniqueInput,
    @common.Body() data: GitLabUserUpdateInput
  ): Promise<GitLabUser | null> {
    try {
      return await this.service.updateGitLabUser({
        where: params,
        data: data,
        select: {
          avatarUrl: true,
          createdAt: true,
          email: true,
          fullName: true,
          gitlabId: true,
          glId: true,
          glUserAvatarUrl: true,
          glUserCreatedAt: true,
          glUserEmail: true,
          glUserFullName: true,
          glUserId: true,
          glUserState: true,
          glUserUsername: true,
          id: true,
          name: true,
          state: true,
          updatedAt: true,
          userEmail: true,
          username: true,
          userName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GitLabUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGitLabUser(
    @common.Param() params: GitLabUserWhereUniqueInput
  ): Promise<GitLabUser | null> {
    try {
      return await this.service.deleteGitLabUser({
        where: params,
        select: {
          avatarUrl: true,
          createdAt: true,
          email: true,
          fullName: true,
          gitlabId: true,
          glId: true,
          glUserAvatarUrl: true,
          glUserCreatedAt: true,
          glUserEmail: true,
          glUserFullName: true,
          glUserId: true,
          glUserState: true,
          glUserUsername: true,
          id: true,
          name: true,
          state: true,
          updatedAt: true,
          userEmail: true,
          username: true,
          userName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
