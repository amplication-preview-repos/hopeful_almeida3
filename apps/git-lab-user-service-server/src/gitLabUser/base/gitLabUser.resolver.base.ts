/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GitLabUser } from "./GitLabUser";
import { GitLabUserCountArgs } from "./GitLabUserCountArgs";
import { GitLabUserFindManyArgs } from "./GitLabUserFindManyArgs";
import { GitLabUserFindUniqueArgs } from "./GitLabUserFindUniqueArgs";
import { CreateGitLabUserArgs } from "./CreateGitLabUserArgs";
import { UpdateGitLabUserArgs } from "./UpdateGitLabUserArgs";
import { DeleteGitLabUserArgs } from "./DeleteGitLabUserArgs";
import { GitLabUserService } from "../gitLabUser.service";
@graphql.Resolver(() => GitLabUser)
export class GitLabUserResolverBase {
  constructor(protected readonly service: GitLabUserService) {}

  async _gitLabUsersMeta(
    @graphql.Args() args: GitLabUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [GitLabUser])
  async gitLabUsers(
    @graphql.Args() args: GitLabUserFindManyArgs
  ): Promise<GitLabUser[]> {
    return this.service.gitLabUsers(args);
  }

  @graphql.Query(() => GitLabUser, { nullable: true })
  async gitLabUser(
    @graphql.Args() args: GitLabUserFindUniqueArgs
  ): Promise<GitLabUser | null> {
    const result = await this.service.gitLabUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => GitLabUser)
  async createGitLabUser(
    @graphql.Args() args: CreateGitLabUserArgs
  ): Promise<GitLabUser> {
    return await this.service.createGitLabUser({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => GitLabUser)
  async updateGitLabUser(
    @graphql.Args() args: UpdateGitLabUserArgs
  ): Promise<GitLabUser | null> {
    try {
      return await this.service.updateGitLabUser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GitLabUser)
  async deleteGitLabUser(
    @graphql.Args() args: DeleteGitLabUserArgs
  ): Promise<GitLabUser | null> {
    try {
      return await this.service.deleteGitLabUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
