/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GitLabUser as PrismaGitLabUser } from "@prisma/client";

export class GitLabUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GitLabUserCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gitLabUser.count(args);
  }

  async gitLabUsers<T extends Prisma.GitLabUserFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GitLabUserFindManyArgs>
  ): Promise<PrismaGitLabUser[]> {
    return this.prisma.gitLabUser.findMany<Prisma.GitLabUserFindManyArgs>(args);
  }
  async gitLabUser<T extends Prisma.GitLabUserFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GitLabUserFindUniqueArgs>
  ): Promise<PrismaGitLabUser | null> {
    return this.prisma.gitLabUser.findUnique(args);
  }
  async createGitLabUser<T extends Prisma.GitLabUserCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GitLabUserCreateArgs>
  ): Promise<PrismaGitLabUser> {
    return this.prisma.gitLabUser.create<T>(args);
  }
  async updateGitLabUser<T extends Prisma.GitLabUserUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GitLabUserUpdateArgs>
  ): Promise<PrismaGitLabUser> {
    return this.prisma.gitLabUser.update<T>(args);
  }
  async deleteGitLabUser<T extends Prisma.GitLabUserDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GitLabUserDeleteArgs>
  ): Promise<PrismaGitLabUser> {
    return this.prisma.gitLabUser.delete(args);
  }
}
